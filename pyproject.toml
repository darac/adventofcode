[build-system]
    build-backend = "pdm.backend"
    requires      = [ "pdm-backend" ]

[tool.black]
    line-length    = 76
    target-version = [ "py311" ]

[tool.coverage.html]
    directory = "htmlcov"

[tool.coverage.paths]
    source = [ "*/site-packages", "aoc" ]

[tool.coverage.report]
    exclude_lines = [
        "def __repr__",
        "if 0:",
        "if __name__ == __main__:",
        "if self.debug",
        "if settings.DEBUG:",
        "pragma: no cover",
        "raise AssertionError",
        "raise NotImplementedError",
    ]
    fail_under = 60
    show_missing = true

[tool.coverage.run]
    branch         = true
    omit           = [ "aoc/__init__.py", "aoc/visualisations/*" ]
    relative_files = true
    source         = [ "aoc" ]

[tool.mypy]
    files                  = [ "aoc/" ]
    ignore_missing_imports = true
    plugins                = "numpy.typing.mypy_plugin"
    warn_return_any        = true
    warn_unused_configs    = true

[tool.pytest.ini_options]
    addopts          = "--cov --cov-report=term --cov-report=xml:coverage.xml --junitxml=junit.xml"
    junit_suite_name = "aoc"

[tool.ruff]
    lint.ignore = [
        "COM812", # Allow ruff formatter
        "ISC001", # Allow ruff formatter
        "N818",   # Don't want to have to call exceptions *Error
        "S101",   # Of course we want to use assert
    ]
    # The AOC website wraps at 76 chars, so should we.
    line-length = 76
    lint.select = [
        "A",
        "ANN",
        "ARG",
        "ASYNC",
        "B",
        "C4",
        "COM",
        "E",
        "EM",
        "EXE",
        "F",
        "FA",
        "FIX",
        "G",
        "I",
        "ICN",
        "INP",
        "ISC",
        "N",
        "NPY",
        "PD",
        "PERF",
        "PIE",
        "PT",
        "PTH",
        "Q",
        "RET",
        "RSE",
        "RUF",
        "S",
        "SIM",
        "SLF",
        "TCH",
        "TD",
        "TID",
        "TRY",
        "UP",
        "W",
        "YTT",
    ]
    target-version = "py311"

[tool.pip-tools]
    # Set generate-hashes for pip-compile
    generate-hashes = true


[tool.pdm]
    [tool.pdm.dev-dependencies]
        dev = [
            "bpython>=0.24",
            "coverage[toml]>=7.6.1",
            "deptry>=0.19.0",
            "mypy>=1.11.1",
            "pre-commit>=3.8.0",
            "pytest-cov>=5.0.0",
            "pytest-gh-log-group>=0.2.0",
            "pytest-randomly>=3.15.0",
            "pytest>=8.3.2",
            "ruff>=0.5.7",
            "toml-sort>=0.23.1",
            "types-pyyaml>=6.0.12.20240808",
        ]

    [tool.pdm.build]
        includes = [  ]

[project]
    authors = [ { name = "Paul Saunders", email = "darac+github@darac.org.uk" } ]
    classifiers = [
        "Programming Language :: Python :: 3",
        "Topic :: Games/Entertainment :: Puzzle Games",
    ]
    dependencies = [
        "advent-of-code-data>=2.0.1",
        "importlib-metadata>=8.2.0; python_version < \"3.8\"",
        "kivy[base]>=2.3.0",
        "numpy>=2.0.1",
        "pandas>=2.2.2",
        "parse>=1.20.2",
        "pillow>=10.4.0",
        "pygame>=2.6.0",
        "rich>=13.7.1",
    ]
    description = "darac's solutions for http://adventofcode.com"
    name = "aoc"
    readme = "README.md"
    requires-python = "<3.13,>=3.9"
    version = "2023.8.6"

    [project.entry-points."adventofcode.user"]
        darac_aoc = "aoc:solve"
