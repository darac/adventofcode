---
name: Test
on:
    merge_group:
    pull_request:
        types:
            - opened
            - synchronize
            - reopened
    push:
        branches:
            - main
        tags:
            - "*"

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    test:
        name: test with ${{ matrix.env }} on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                env:
                    - "3.13"
                    - "3.12"
                os:
                    - ubuntu-latest
                    - macos-latest
                    # - windows-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  fetch-depth: 0

            - name: Setup UV
              uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6
              with:
                  activate-environment: true

            - name: Add .local/bin to Windows PATH
              if: runner.os == 'Windows'
              shell: bash
              run: echo "$USERPROFILE/.local/bin" >> $GITHUB_PATH

            - name: Install tox
              run: uv tool install --python-preference only-managed --python
                  3.13 tox --with tox-uv # --with tox-gh

            - name: Setup Python
              if: matrix.env != '3.13'
              run:
                  uv python install --python-preference only-managed ${{
                  matrix.env }}

            - name: Setup Tests
              run: tox run -vv --notest --skip-missing-interpreters false
              env:
                  TOX_GH_MAJOR_MINOR: ${{ matrix.env }}

            - name: Run test suite
              run: tox run --skip-pkg-install
              env:
                  AOC_SESSION: ${{ secrets.AOC_SESSION }}
                  TOX_GH_MAJOR_MINOR: ${{ matrix.env }}

            - name: Rename reports
              if: success() || failure()
              run: >-
                  mv junit.xml "junit-${{ matrix.os }}-${{ matrix.env }}.xml" ;
                  mv ruff.json "ruff-${{ matrix.os }}-${{ matrix.env }}.json" ;
                  mv coverage.xml "coverage-${{ matrix.os }}-${{ matrix.env
                  }}.xml"

            - name: Upload JUnit results
              if: success() || failure()
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: junit-${{ matrix.os }}-${{ matrix.env }}
                  path: |
                      coverage*.xml
                      junit-*.xml
                      ruff-*.json
                  retention-days: 1

            - name: Publish Test Report
              uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
              if: success() || failure()
              with:
                  name: Tox Tests (${{ matrix.env }})
                  path: "junit-*.xml"
                  reporter: java-junit

    check_sonar_secret:
        name: check if SONAR_TOKEN is set in github secrets
        runs-on: ubuntu-latest
        outputs:
            is_SONAR_TOKEN_set:
                ${{ steps.checksecret_job.outputs.is_SONAR_TOKEN_set }}
        steps:
            - name: Check whether Sonar Scan should be done
              id: checksecret_job
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: |
                  echo "is_SONAR_TOKEN_set: ${{ env.SONAR_TOKEN != '' }}"
                  echo "is_SONAR_TOKEN_set=${{ env.SONAR_TOKEN != '' }}" >> $GITHUB_OUTPUT

    sonar:
        needs:
            - test
            - check_sonar_secret
        concurrency: release
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  fetch-depth: 0

            - name: Obtain Project Version
              uses: SebRollen/toml-action@b1b3628f55fc3a28208d4203ada8b737e9687876 # v1.2.0
              id: proj-version
              with:
                  file: pyproject.toml
                  field: project.version

            - name: Cache SonarQube packages
              uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Download JUnit reports
              uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
              with:
                  path: .
                  merge-multiple: true
              env:
                  PARALLEL_DOWNLOADS: 1

            - name: SonarCloud Scan
              uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                  args: >
                      -Dsonar.projectVersion=${{
                      steps.proj-version.outputs.value }}

    release:
        needs: test
        concurrency: release
        permissions:
            id-token: write
            contents: write
        if:
            github.event_name == 'push' && github.ref == 'refs/heads/main' &&
            !contains(github.event.head_commit.message, 'chore(release):')
        runs-on: ubuntu-latest
        outputs:
            released: ${{ steps.release.outputs.released }}
        steps:
            # Note: we need to checkout the repository at the workflow sha in case during the workflow
            # the branch was updated. To keep PSR working with the configured release branches,
            # we force a checkout of the desired release branch but at the workflow sha HEAD.
            - name: Setup | Checkout Repository at workflow sha
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  fetch-depth: 0
                  ref: ${{ github.sha }}

            - name: Setup | Force correct release branch on workflow sha
              run: |
                  git checkout -B ${{ github.ref_name }} ${{ github.sha }}

            - name: Setup | Install UV
              uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6
              with:
                  version: latest
                  enable-cache: true

            - name: Setup | Install Python
              run: uv python install

            - name: Action | Semantic Version Release
              id: release
              # Adjust tag with desired version if applicable.
              uses: python-semantic-release/python-semantic-release@4d4cb0ab842247caea1963132c242c62aab1e4d5 # v10.4.1
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  git_committer_name: "github-actions"
                  git_committer_email: "actions@users.noreply.github.com"

            - name: Publish | Upload to GitHub Release Assets
              uses: python-semantic-release/publish-action@ae6462adc12bd3d1738070d784b65b5189b955a9 # v10.4.1
              if: steps.release.outputs.released == 'true'
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  tag: ${{ steps.release.outputs.tag }}

    docker-image:
        needs: release
        concurrency: release
        runs-on: ubuntu-latest
        if: ${{ needs.release.outputs.released }} == "true"
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}

        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

            - name: Log in to the container registry
              uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@032a4b3bda1b716928481836ac5bfe36e1feaad6
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
              with:
                  context: .
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true
