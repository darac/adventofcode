[build-system]
    build-backend = "hatchling.build"
    requires      = ["hatchling"]

[project]
    authors = [{ name = "Paul Saunders", email = "darac+github@darac.org.uk" }]
    classifiers = [
        "Programming Language :: Python :: 3",
        "Topic :: Games/Entertainment :: Puzzle Games",
    ]
    dependencies = [
        "advent-of-code-data>=2.0.1",
        "kivy[base]>=2.3.0",
        "numpy>=2.1.3",
        "pandas>=2.2.2",
        "parse>=1.20.2",
        "pygame>=2.6.0",
        "rich>=13.7.1",
    ]
    description = "darac's solutions for http://adventofcode.com"
    name = "aoc"
    readme = "README.md"
    # It's common to not specify an upper band,
    # But some of the dependencies are slow to update,
    # So, we limit here until they update.
    requires-python = "<3.14,>=3.12"
    version         = "2025.2.0"

    [project.entry-points."adventofcode.user"]
        darac_aoc = "aoc:solve"

    [project.optional-dependencies]
        dev = [
            "deptry>=0.19.0",
            "mypy>=1.15.0",
            "pre-commit>=3.8.0",
            "python-semantic-release>=9.8.7",
            "ruff>=0.5.7",
            "types-pyyaml>=6.0.12.20240808",
        ]

        test = [
            "pytest-cov>=6.1.1",
            "pytest-gh-log-group>=0.2.0",
            "pytest-randomly>=3.16.0",
            "pytest-timeout>=2.4.0",
            "pytest-xdist>=3.7.0",
        ]

[tool.black]
    line-length    = 76
    target-version = ["py312"]

[tool.coverage.html]
    directory = "htmlcov"

[tool.coverage.paths]
    source = ["*/site-packages", "aoc"]

[tool.coverage.report]
    exclude_lines = [
        "def __repr__",
        "if 0:",
        "if __name__ == __main__:",
        "if self.debug",
        "if settings.DEBUG:",
        "pragma: no cover",
        "raise AssertionError",
        "raise NotImplementedError",
    ]
    fail_under = 60
    show_missing = true

[tool.coverage.run]
    branch         = true
    omit           = ["aoc/__init__.py", "aoc/visualisations/*"]
    relative_files = true
    source         = ["aoc"]

[tool.mypy]
    files                  = ["aoc/"]
    ignore_missing_imports = true
    warn_return_any        = true
    warn_unused_configs    = true

[tool.pyright]
    exclude        = ["**/__pycache__", ".pytest_cache", ".ruff_cache", ".venv"]
    pythonPlatform = "All"
    pythonVersion  = "3.12"
    venv           = "/home/vscode/.venv"

[tool.pytest.ini_options]
    addopts = """\
    --cov \
    --cov-report=xml:coverage.xml \
    --junit-xml=junit.xml \
    --tb=auto \
    --timeout=300 \
    """
    junit_suite_name = "aoc"

[tool.ruff]
    # The AOC website wraps at 76 chars, so should we.
    line-length = 76
    lint.ignore = [
        "C901",
        "COM812", # Allow ruff formatter
        "D",      # Skip Docstrings
        "FBT",    # Allow boolean parameters
        "ISC001", # Allow ruff formatter
        "N818",   # Don't want to have to call exceptions *Error
        "PLR",
        "S101",   # Of course we want to use assert
        "T201",   # Allow use of `print`
    ]
    lint.select = ["ALL"]
    target-version = "py312"

[tool.semantic_release]
    build_command = """
    pip install uv
    uv lock
    git add uv.lock
    uv build
    """

    version_toml      = ["pyproject.toml:project.version"]
    version_variables = ["aoc/__init__.py:__version__"]

    [tool.semantic_release.changelog.environment]
        autoescape = true

[tool.sonar]
    coverage.exclusions         = "aoc/visualisations/**,**/__init__.py"
    links.homepage              = "https://github.com/darac/adventofcode/"
    organization                = "darac"
    projectKey                  = "darac_adventofcode"
    python.coverage.reportPaths = "*coverage*.xml"
    python.ruff.reportPaths     = "ruff*.json"
    python.version              = "3.12"
    python.xunit.reportPath     = "junit*.xml"
    python.xunit.skipDetails    = true
    sources                     = "aoc/"
    tests                       = "tests/"

[tool.tox]
    env_list = ["3.12", "3.13", "ruff", "type"]
    requires = ["tox>=4.19"]

    [tool.tox.env_run_base]
        commands          = [["uv", "run", "pytest", "-q"]]
        dependency_groups = ["test"]
        description       = "Run test under {base_python}"
        extras            = ["test"]
        runner            = "uv-venv-lock-runner"

    [tool.tox.env.ruff]
        commands = [
            [
                "uv",
                "run",
                "ruff",
                "check",
                "aoc",
                "--output-format",
                "json",
                "--output-file",
                "ruff.json",
            ],
        ]
        description = "Run ruff checking"
        runner = "uv-venv-lock-runner"

    [tool.tox.env.type]
        commands    = [["uv", "run", "mypy", "tests"], ["uv", "run", "mypy", "aoc"]]
        deps        = ["mypy==1.11.2", "types-cachetools>=5.5.0.20240820", "types-chardet>=5.0.4.6"]
        description = "Run type check on code base"
        runner      = "uv-venv-lock-runner"

    [tool.tox.gh.python]
        "3.10" = ["3.10"]
        "3.11" = ["3.11"]
        "3.12" = ["3.12", "ruff", "type"]
        "3.13" = ["3.13", "ruff", "type"]
        "3.14" = ["3.14", "ruff", "type"]


[dependency-groups]
    dev = [
        "deptry>=0.19.0",
        "mypy>=1.15.0",
        "pre-commit>=3.8.0",
        "python-semantic-release>=9.8.7",
        "ruff>=0.5.7",
        "types-pyyaml>=6.0.12.20240808",
    ]

    test = [
        "pytest-cov>=6.1.1",
        "pytest-gh-log-group>=0.2.0",
        "pytest-randomly>=3.16.0",
        "pytest-timeout>=2.4.0",
        "pytest-xdist>=3.7.0",
    ]
